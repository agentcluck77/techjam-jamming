import google.genai as genai
import json
import re

# --- Step 0: Initialize client ---
client = genai.Client(api_key= "AIzaSyB4exWhg-i3FCElgUdmAy3BsUdlzHAeY1M")

# --- Helper: Clean model output of markdown ---
def clean_json_output(text: str) -> str:
    """
    Remove markdown formatting and extra whitespace from model output.
    """
    text = re.sub(r"^```(?:json)?\s*", "", text)  # remove starting ```json or ```
    text = re.sub(r"\s*```$", "", text)           # remove ending ```
    return text.strip()

# --- Step 1: Extract Definitions and Regulations ---
STEP1_SYSTEM_PROMPT = """
You are a legal document parser.
You will be given a raw law or regulation document that may contain headers, metadata, citations, commentary, and formatting.  
Your task is to read a legal document text and extract only:
1. Definitions of legal terms (explicitly defined terms (e.g., 'As used in this section, the term "X" means ...'))
2. Actual legal clauses (enforceable rules, obligations, or prohibitions. Use the statutory provision (Section, Article, Clause) numbers as a guide for each separate regulation)

Rules:
- Ignore headers, footers, page numbers, and any text outside definitions or regulations.
- Ignore ENROLLED markings or coding notes
- Ignore Legislative commentary, summaries, or prefaces
- Output strictly in JSON format with exactly two keys:
  {
    "definitions": { "TERM1": "Definition text", "TERM2": "Definition text", ... },
    "regulations": "All the regulations text concatenated as a single string"
  }
- Do not include any explanations or extra text outside the JSON.
"""

RAW_LEGAL_TEXT = """
Section 4. Section 13-63-201 is enacted to read:
233 Part 2. Social Media Design Regulations
234 13-63-201. Social media platform design regulations -- Enforcement and auditing
235 authority -- Penalties.
236 (1) Beginning March 1, 2024:
237 (a) the division shall administer and enforce the provisions of this section; and
238 (b) the division may audit the records of a social media company in order to determine
239 compliance with the requirements of this section or to investigate a complaint, including a
240 random sample of a social media company's records and other audit methods.
241 (2) Beginning March 1, 2024, a social media company shall not use a practice, design,
242 or feature on the company's social media platform that the social media company knows, or
243 which by the exercise of reasonable care should know, causes a Utah minor account holder to 
244 have an addiction to the social media platform.
245 (3) Beginning March 1, 2024:
246 (a) Subject to Subsection (3)(b), a social media company is subject to:
247 (i) a civil penalty of $250,000 for each practice, design, or feature shown to have
248 caused addiction; and
249 (ii) a civil penalty of up to $2,500 for each Utah minor account holder who is shown to
250 have been exposed to the practice, design, or feature found to have caused addiction under
251 Subsection (3)(a)(i).
252 (b) A social media company shall not be subject to a civil penalty for violating this
253 section if the social media company, as an affirmative defense, demonstrates that the social
254 media company:
255 (i) instituted and maintained a program of at least quarterly audits of the social media
256 company's practices, designs, and features to detect practices, designs, or features that have the
257 potential to cause or contribute to the addiction of a minor user; and
258 (ii) corrected, within 30 days of the completion of an audit described in Subsection
259 (3)(b)(i), any practice, design, or feature discovered by the audit to present more than a de
260 minimus risk of violating this section.
261 (c) In a court action by the division to enforce this section, the court may, in addition to
262 a civil penalty:
263 (i) declare that the act or practice violates a provision of this section;
264 (ii) issue an injunction for a violation of this section;
265 (iii) award actual damages to an injured purchaser or consumer; and
266 (iv) award any other relief that the court deems reasonable and necessary.
267 (4) Nothing in this section may be construed to impose liability for a social media
268 company for any of the following:
269 (a) content that is generated by an account holder, or uploaded to or shared on the
270 platform by an account holder, that may be encountered by another account holder;
271 (b) passively displaying content that is created entirely by a third party;
272 (c) information or content for which the social media company was not, in whole or in
273 part, responsible for creating or developing; or
274 (d) any conduct by a social media company involving a Utah minor account holder
275 who would otherwise be protected by federal or Utah law.
276 (5) If a court of competent jurisdiction grants judgment or injunctive relief to the
277 division, the court shall award the division:
278 (a) reasonable attorney fees;
279 (b) court costs; and
280 (c) investigative fees.
281 (6) Nothing in this section may be construed to negate or limit a cause of action that
282 may have existed or exists against a social media company under the law as it existed before
283 the effective date of this section.
284 (7) All money received for the payment of a fine or civil penalty imposed under this
285 section shall be deposited into the Consumer Protection Education and Training Fund
286 established in Section 13-2-8.
    """

# Combine system prompt and user text into a single string
input_text_step1 = STEP1_SYSTEM_PROMPT + "\n\n" + RAW_LEGAL_TEXT

# Generate Step 1 output
step1_response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents=input_text_step1  # <-- pass a single string, not a list of dicts
)

# Clean and parse JSON
step1_text_clean = clean_json_output(step1_response.text)

try:
    step1_json = json.loads(step1_text_clean)
    definitions = step1_json.get("definitions", {})
    regulations_text = step1_json.get("regulations", "")
    print("Step 1 output:")
    print(json.dumps(step1_json, indent=2))
except json.JSONDecodeError:
    raise ValueError(f"Failed to parse JSON from Step 1:\n{step1_text_clean}")


# --- Step 2: Chunk Regulations by Section/Article ---
STEP2_SYSTEM_PROMPT = """
You are a legal text parser. Your task is to read the legal regulations text and split it into individual sections or articles.

Rules:
- Each output object must have exactly two keys:
  1. "law_id": the section or article identifier (e.g., "Article 1", "Section 2.1").
    - Only explicit "Section X" or "Article Y" headers define a law_id.
    - Each law_id will start with the word "Section" or "Article" depending on the context, but do NOT include the words "Section" or "Article" in the law_id itself.
    - Always include the main numeric section or article number as the base (decimal or hyphenated, e.g., 501.736, 13-63-201).
    - If a section has multiple numbers, choose the most specific one (decimals preferred over integers).
    - Ignore very general numbers like "Section 1" if a more specific number exists in the same clause.
    - Do NOT generate law_ids that are only letters or parentheses without a numeric parent.
    - Ignore all numbers or letters in parentheses within the section text (e.g., (1), (a), (i)); they should remain part of the regulation text and not be used as law_id.
    - Treat everything following a section/article header as the regulation text until the next section/article header.


  2. "regulation": the full text of that section/article, preserving punctuation but removing extra line breaks.
- Preserve the order of sections as they appear in the document.
- Combine multi-line clauses under the same law_id.
- Output strictly valid JSON as a list of objects, without any extra explanations.
"""

input_text_step2 = STEP2_SYSTEM_PROMPT + "\n\n" + regulations_text

# Generate Step 2 output
step2_response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents=input_text_step2  # <-- single string
)

# Clean and parse JSON
step2_text_clean = clean_json_output(step2_response.text)

try:
    regulations_list = json.loads(step2_text_clean)
    print("\nStep 2 output:")
    print(json.dumps(regulations_list, indent=2))
except json.JSONDecodeError:
    raise ValueError(f"Failed to parse JSON from Step 2:\n{step2_text_clean}")