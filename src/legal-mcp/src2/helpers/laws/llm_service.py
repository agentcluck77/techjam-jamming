import google.genai as genai
import json
import re
import os 
from dotenv import load_dotenv
# law 

load_dotenv()

api = os.getenv("GOOGLE_API_KEY")

# --- Step 0: Initialize client ---
client = genai.Client(api_key = api)

# raw_text = """Section 4. Section 13-63-201 is enacted to read:
# 233 Part 2. Social Media Design Regulations
# 234 13-63-201. Social media platform design regulations -- Enforcement and auditing
# 235 authority -- Penalties.
# 236 (1) Beginning March 1, 2024:
# 237 (a) the division shall administer and enforce the provisions of this section; and
# 238 (b) the division may audit the records of a social media company in order to determine
# 239 compliance with the requirements of this section or to investigate a complaint, including a
# 240 random sample of a social media company's records and other audit methods.
# 241 (2) Beginning March 1, 2024, a social media company shall not use a practice, design,
# 242 or feature on the company's social media platform that the social media company knows, or
# 243 which by the exercise of reasonable care should know, causes a Utah minor account holder to 
# 244 have an addiction to the social media platform.
# 245 (3) Beginning March 1, 2024:
# 246 (a) Subject to Subsection (3)(b), a social media company is subject to:
# 247 (i) a civil penalty of $250,000 for each practice, design, or feature shown to have
# 248 caused addiction; and
# 249 (ii) a civil penalty of up to $2,500 for each Utah minor account holder who is shown to
# 250 have been exposed to the practice, design, or feature found to have caused addiction under
# 251 Subsection (3)(a)(i).
# 252 (b) A social media company shall not be subject to a civil penalty for violating this
# 253 section if the social media company, as an affirmative defense, demonstrates that the social
# 254 media company:
# 255 (i) instituted and maintained a program of at least quarterly audits of the social media
# 256 company's practices, designs, and features to detect practices, designs, or features that have the
# 257 potential to cause or contribute to the addiction of a minor user; and
# 258 (ii) corrected, within 30 days of the completion of an audit described in Subsection
# 259 (3)(b)(i), any practice, design, or feature discovered by the audit to present more than a de
# 260 minimus risk of violating this section.
# 261 (c) In a court action by the division to enforce this section, the court may, in addition to
# 262 a civil penalty:
# 263 (i) declare that the act or practice violates a provision of this section;
# 264 (ii) issue an injunction for a violation of this section;
# 265 (iii) award actual damages to an injured purchaser or consumer; and
# 266 (iv) award any other relief that the court deems reasonable and necessary.
# 267 (4) Nothing in this section may be construed to impose liability for a social media
# 268 company for any of the following:
# 269 (a) content that is generated by an account holder, or uploaded to or shared on the
# 270 platform by an account holder, that may be encountered by another account holder;
# 271 (b) passively displaying content that is created entirely by a third party;
# 272 (c) information or content for which the social media company was not, in whole or in
# 273 part, responsible for creating or developing; or
# 274 (d) any conduct by a social media company involving a Utah minor account holder
# 275 who would otherwise be protected by federal or Utah law.
# 276 (5) If a court of competent jurisdiction grants judgment or injunctive relief to the
# 277 division, the court shall award the division:
# 278 (a) reasonable attorney fees;
# 279 (b) court costs; and
# 280 (c) investigative fees.
# 281 (6) Nothing in this section may be construed to negate or limit a cause of action that
# 282 may have existed or exists against a social media company under the law as it existed before
# 283 the effective date of this section.
# 284 (7) All money received for the payment of a fine or civil penalty imposed under this
# 285 section shall be deposited into the Consumer Protection Education and Training Fund
# 286 established in Section 13-2-8. 
# ENROLLED
# CS/CS/HB 3, Engrossed 1 2024 Legislature
# CODING: Words stricken are deletions; words underlined are additions.
# hb0003-04-er
# Page 2 of 20
# F L O R I D A H O U S E O F R E P R E S E N T A T I V E S
# 26 compliance actions; authorizing the department to
# 27 adopt rules; creating s. 501.1737, F.S.; defining
# 28 terms; requiring a commercial entity that knowingly
# 29 and intentionally publishes or distributes material
# 30 harmful to minors on a website or application that
# 31 contains a substantial portion of such material to use
# 32 certain verification methods and prevent access to
# 33 such material by minors; providing applicability and
# 34 construction; authorizing the department to bring
# 35 actions under the Florida Deceptive and Unfair Trade
# 36 Practices Act for violations; providing civil
# 37 penalties; authorizing punitive damages under certain
# 38 circumstances; providing for private causes of action;
# 39 requiring that such actions be brought within a
# 40 specified timeframe; providing that certain commercial
# 41 entities are subject to the jurisdiction of state
# 42 courts; providing construction; authorizing the
# 43 department to take certain investigative and
# 44 compliance actions; authorizing the department to
# 45 adopt rules; creating s. 501.1738, F.S.; defining the
# 46 term "anonymous age verification"; providing
# 47 requirements for a third party conducting age
# 48 verification pursuant to certain provisions; providing
# 49 for severability; providing an effective date.
# 50

# ENROLLED
# CS/CS/HB 3, Engrossed 1 2024 Legislature
# CODING: Words stricken are deletions; words underlined are additions.
# hb0003-04-er
# Page 3 of 20
# F L O R I D A H O U S E O F R E P R E S E N T A T I V E S
# 51 Be It Enacted by the Legislature of the State of Florida:
# 52
# 53 Section 1. Section 501.1736, Florida Statutes, is created
# 54 to read:
# 55 501.1736 Social media use for minors.â€”
# 56 (1) As used in this section, the term:
# 57 (a) "Account holder" means a resident who opens an account
# 58 or creates a profile or is identified by the social media
# 59 platform by a unique identifier while using or accessing a
# 60 social media platform when the social media platform knows or
# 61 has reason to believe the resident is located in this state.
# 62 (b) "Daily active users" means the number of unique users
# 63 in the United States who used the online forum, website, or
# 64 application at least 80 percent of the days during the previous
# 65 12 months, or, if the online forum, website, or application did
# 66 not exist during the previous 12 months, the number of unique
# 67 users in the United States who used the online forum, website,
# 68 or application at least 80 percent of the days during the
# 69 previous month.
# 70 (c) "Department" means the Department of Legal Affairs.
# 71 (d) "Resident" means a person who lives in this state for
# 72 more than 6 months of the year.
# 73 (e) "Social media platform" means an online forum,
# 74 website, or application that satisfies each of the following
# 75 criteria:"""

# --- Helper: Clean model output of markdown ---
def clean_json_output(text: str) -> str:
    """
    Remove markdown formatting and extra whitespace from model output.
    """
    text = re.sub(r"^```(?:json)?\s*", "", text)  # remove starting ```json or ```
    text = re.sub(r"\s*```$", "", text)           # remove ending ```
    return text.strip()

# --- Step 1: Extract Definitions and Regulations ---
def step1(raw_text): 
    structure = """{
    "definitions": { "TERM1": "Definition text", "TERM2": "Definition text", ... },
    "regulations": "All the regulations text concatenated as a single string"
  }"""
    
    prompt = f"""
You are a legal document parser.
You will be given a raw law or regulation document that may contain headers, metadata, citations, commentary, and formatting.  
Your task is to read a legal document text and extract only:
1. Definitions of legal terms (explicitly defined terms (e.g., 'As used in this section, the term "X" means ...'))
2. Actual legal clauses (enforceable rules, obligations, or prohibitions. Use the statutory provision (Section, Article, Clause) numbers as a guide for each separate regulation)

Rules:
- Always include the official section/article header (e.g., "Section 13-63-201", "Article 5.3") along with its regulation text.
- Do not drop or rewrite section/article numbers. They must appear in the regulations string exactly as they appear in the source text.
- Ignore page headers, footers, coding notes, and enrollments, but keep statutory section/article headers.
- The "regulations" value should be a single string concatenating all sections/articles in order, including their headers.
- Ignore ENROLLED markings or coding notes
- Ignore Legislative commentary, summaries, or prefaces
- Output strictly in JSON format with exactly two keys: {structure}
  
- Do not include any explanations or extra text outside the JSON.

This your raw legal text: {raw_text}"""
    
    step1_response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents=prompt  # <-- pass a single string, not a list of dicts
)
    step1_text_clean = clean_json_output(step1_response.text)

    try:
        step1_json = json.loads(step1_text_clean)
        definitions = step1_json.get("definitions", {})
        regulations_text = step1_json.get("regulations", "")

    except json.JSONDecodeError:
        raise ValueError(f"Failed to parse JSON from Step 1:\n{step1_text_clean}")
    
    return definitions, regulations_text

# Clean and parse JSON


# --- Step 2: Chunk Regulations by Section/Article ---
def step2(regulations_text):
    prompt = f"""
You are a legal text parser. Your task is to read the legal regulations text and split it into individual sections or articles.

Rules:
- Each output object must have exactly two keys:
  1. "law_id": the section or article identifier (e.g., "Article 1", "Section 2.1").
    - Only extract references to codified statutes, e.g., numbers like 171.02, 120.45, etc. Ignore internal bill section numbers like Section 1, Section 4, etc.
    - Each law_id must only start with "Section" or "Article" (E.g. "Section 1.236", "Article 2.345")
    - Ignore very general numbers like "Section 1" if a more specific number exists in the same clause.
    - Once "Article" or "Section" has been found, the following text will be "regulation" until the next "Article" or "Section" is found
    - Only extract references to codified statutes, e.g., numbers like 171.02, 120.45, etc. Ignore internal bill section numbers like Section 1, Section 4, etc.
    
  2. "regulation": the full text of that section/article, preserving punctuation but removing extra line breaks.
- Preserve the order of sections as they appear in the document.
- Combine multi-line clauses under the same law_id.
- Output strictly valid JSON as a list of objects, without any extra explanations.

Here is your legal regulations text: {regulations_text}
"""
    # Generate Step 2 output
    step2_response = client.models.generate_content(
        model="gemini-1.5-flash",
        contents = prompt  # <-- single string
    )

    # Clean and parse JSON
    step2_text_clean = clean_json_output(step2_response.text)

    try:
        regulations_list_cleaned = json.loads(step2_text_clean)
    except json.JSONDecodeError:
        raise ValueError(f"Failed to parse JSON from Step 2:\n{step2_text_clean}")
    
    return regulations_list_cleaned

async def cleaner_llm (raw_text):
    definitions, regulations_list = step1(raw_text)
    regulations_list_cleaned = step2(regulations_list)
    regulations = json.dumps(regulations_list_cleaned, indent=2)
    return definitions, regulations

